@startuml

actor User as User
(Just a function.\nValidate, fetch,\ncall Updater.) as Action <<Action>>
(Async qeue\nof state updates) as Updater <<Updater>>
(pending,\nerror,\ncomplete,\nretry source) as UpdaterStatus <<UpdaterStatus>>
(view model,\nfacet) as Computed <<Computed>>
(render,\nmount,\nunmount) as Component <<Component>>
(class with jss styles) as Styles <<Styles>>
(domain model) as Source <<Source>>
(async loading data\non model access) as Loader <<Loader>>
(initial state from server) as Value <<Value>>

User --> Action: events
Action --> Updater: model instances,\npromises,\nobservables
Updater --> UpdaterStatus: combine\nloading status\nfrom many updaters
UpdaterStatus --> Computed: updates
Computed --> Component: trigger
Component --> Styles: mount/unmount

Updater --> Source: modify
Source-->Computed: updates

Styles --> Component: provide class names
Source-->Loader: call on first access

Loader-->Updater: call

Value-->Source: pass to constructor

Component-->Action: events to action calls

@enduml
